========================================================================
Pattern matching 1
========================================================================

const a = match (1) { 2 => 3, 4 => 5 };
const a = match (1) { 2 => {} 4 => { statement; } };

------------------------------------------------------------------------

(source_file
  (constant_declaration
    (identifier)
    (match_expression
      (number_literal)
      (match_body
        (match_arm
          (number_literal)
          (number_literal))
        (match_arm
          (number_literal)
          (number_literal)))))
  (constant_declaration
    (identifier)
    (match_expression
      (number_literal)
      (match_body
        (match_arm
          (number_literal)
          (block_statement))
        (match_arm
          (number_literal)
          (block_statement
            (expression_statement
              (identifier))))))))

========================================================================
Pattern matching 2
========================================================================

const a = match (1+2) { slice => 3, SomeStruct? => 5 };
const a = match (1&2) { (int, builder) => {}, int | builder => { statement; }, };

------------------------------------------------------------------------

(source_file
  (constant_declaration
    (identifier)
    (match_expression
      (binary_operator
        (number_literal)
        (number_literal))
      (match_body
        (match_arm
          (type_identifier)
          (number_literal))
        (match_arm
          (nullable_type
            (type_identifier))
          (number_literal)))))
  (constant_declaration
    (identifier)
    (match_expression
      (binary_operator
        (number_literal)
        (number_literal))
      (match_body
        (match_arm
          (tensor_type
            (type_identifier)
            (type_identifier))
          (block_statement))
        (match_arm
          (union_type
            (type_identifier)
            (type_identifier))
          (block_statement
            (expression_statement
              (identifier))))))))

========================================================================
Pattern matching 3
========================================================================

fun f() {
  match (x) {}
  var x = match (val x = y) {
    0 => {},
    int => throw 0,
    else => return 0,
  };
}

------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameter_list)
    (block_statement
      (match_statement
        (match_expression
          (identifier)
          (match_body)))
      (local_vars_declaration
        (var_declaration
          (identifier))
        (match_expression
          (local_vars_declaration
            (var_declaration
              (identifier))
            (identifier))
          (match_body
            (match_arm
              (number_literal)
              (block_statement))
            (match_arm
              (type_identifier)
              (throw_statement
                (number_literal)))
            (match_arm
              (return_statement
                (number_literal)))))))))

========================================================================
Msg matching
========================================================================

fun onInternalMessage(in: InMessage) {
    val msg = lazy AllowedMessage.fromSlice(in.body);

    match (msg) {
        IncreaseCounter => {
            storage.save();
        }

        ResetCounter => {
            storage.save();
        }

        else => {
            assert (in.body.isEmpty()) throw 0xFFFF;
        }
    }
}

------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameter_list
      (parameter_declaration
        (identifier)
        (type_identifier)))
    (block_statement
      (local_vars_declaration
        (var_declaration
          (identifier))
        (lazy_expression
          (function_call
            (dot_access
              (identifier)
              (identifier))
            (argument_list
              (call_argument
                (dot_access
                  (identifier)
                  (identifier)))))))
      (match_statement
        (match_expression
          (identifier)
          (match_body
            (match_arm
              (type_identifier)
              (block_statement
                (expression_statement
                  (function_call
                    (dot_access
                      (identifier)
                      (identifier))
                    (argument_list)))))
            (match_arm
              (type_identifier)
              (block_statement
                (expression_statement
                  (function_call
                    (dot_access
                      (identifier)
                      (identifier))
                    (argument_list)))))
            (match_arm
              (block_statement
                (assert_statement
                  (function_call
                    (dot_access
                      (dot_access
                        (identifier)
                        (identifier))
                      (identifier))
                    (argument_list))
                  (number_literal))))))))))

========================================================================
Match arm with single identifier
========================================================================

fun onInternalMessage() {
    match (msg) {
        IncreaseCounter => {
            foo
        }

        else => {
            bar
        }
    }
}

------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameter_list)
    (block_statement
      (match_statement
        (match_expression
          (identifier)
          (match_body
            (match_arm
              (type_identifier)
              (block_statement
                (expression_statement
                  (identifier))))
            (match_arm
              (block_statement
                (expression_statement
                  (identifier))))))))))

========================================================================
Match arm with paren object literal
========================================================================

fun onInternalMessage() {
    match (msg) {
        IncreaseCounter => ({
            foo
        })

        else => ({
            bar
        })
    }
}

------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameter_list)
    (block_statement
      (match_statement
        (match_expression
          (identifier)
          (match_body
            (match_arm
              (type_identifier)
              (parenthesized_expression
                (object_literal
                  (object_literal_body
                    (instance_argument
                      (identifier))))))
            (match_arm
              (parenthesized_expression
                (object_literal
                  (object_literal_body
                    (instance_argument
                      (identifier))))))))))))

========================================================================
Match arm with object literal without paren
========================================================================

fun onInternalMessage() {
    match (msg) {
        IncreaseCounter => {
            foo: bar
        }

        else => {
            foo: bar
        }
    }
}

------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameter_list)
    (block_statement
      (match_statement
        (match_expression
          (identifier)
          (match_body
            (match_arm
              (type_identifier)
              (object_literal
                (object_literal_body
                  (instance_argument
                    (identifier)
                    (identifier)))))
            (match_arm
              (object_literal
                (object_literal_body
                  (instance_argument
                    (identifier)
                    (identifier)))))))))))
