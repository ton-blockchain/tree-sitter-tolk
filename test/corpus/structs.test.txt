========================================================================
Struct 1
========================================================================

struct A {
    f: int,
    g: int = 0;
    b: slice | string = (1,2,[3]),
}

------------------------------------------------------------------------

(source_file
  (struct_declaration
    (identifier)
    (struct_body
      (struct_field_declaration
        (identifier)
        (type_identifier))
      (struct_field_declaration
        (identifier)
        (type_identifier)
        (number_literal))
      (struct_field_declaration
        (identifier)
        (union_type
          (type_identifier)
          (type_identifier))
        (tensor_expression
          (number_literal)
          (number_literal)
          (typed_tuple
            (number_literal)))))))

========================================================================
Generic struct
========================================================================

struct Container<T> {
    item: T;
}

------------------------------------------------------------------------

(source_file
  (struct_declaration
    (identifier)
    (type_parameters
      (type_parameter
        (identifier)))
    (struct_body
      (struct_field_declaration
        (identifier)
        (type_identifier)))))

========================================================================
Generic struct with default T
========================================================================

struct Container<T = null> {
    item: T? = null;
}

------------------------------------------------------------------------

(source_file
  (struct_declaration
    (identifier)
    (type_parameters
      (type_parameter
        (identifier)
        (type_identifier)))
    (struct_body
      (struct_field_declaration
        (identifier)
        (nullable_type
          (type_identifier))
        (null_literal)))))

========================================================================
Create object
========================================================================

const a = { x: 10 };
const a = { x: 10, y: null + 1 };
const a = Point { x, y };
const a = { x };
const a = {};
struct Point { x: Point = { x: 0 } }

------------------------------------------------------------------------

(source_file
  (constant_declaration
    (identifier)
    (object_literal
      (object_literal_body
        (instance_argument
          (identifier)
          (number_literal)))))
  (constant_declaration
    (identifier)
    (object_literal
      (object_literal_body
        (instance_argument
          (identifier)
          (number_literal))
        (instance_argument
          (identifier)
          (binary_operator
            (null_literal)
            (number_literal))))))
  (constant_declaration
    (identifier)
    (object_literal
      (type_identifier)
      (object_literal_body
        (instance_argument
          (identifier))
        (instance_argument
          (identifier)))))
  (constant_declaration
    (identifier)
    (object_literal
      (object_literal_body
        (instance_argument
          (identifier)))))
  (constant_declaration
    (identifier)
    (object_literal
      (object_literal_body)))
  (struct_declaration
    (identifier)
    (struct_body
      (struct_field_declaration
        (identifier)
        (type_identifier)
        (object_literal
          (object_literal_body
            (instance_argument
              (identifier)
              (number_literal))))))))

========================================================================
Create an object with explicit struct
========================================================================

const a = Point { x: 10 };
const a = Container<slice> { item: "" };

fun foo() {
    val a = Container<slice> { item: "" };
}

------------------------------------------------------------------------

(source_file
  (constant_declaration
    name: (identifier)
    value: (object_literal
      type: (type_identifier)
      arguments: (object_literal_body
        (instance_argument
          name: (identifier)
          value: (number_literal)))))
  (constant_declaration
    name: (identifier)
    value: (object_literal
      type: (type_instantiatedTs
        name: (type_identifier)
        arguments: (instantiationT_list
          types: (type_identifier)))
      arguments: (object_literal_body
        (instance_argument
          name: (identifier)
          value: (string_literal)))))
  (function_declaration
    name: (identifier)
    parameters: (parameter_list)
    body: (block_statement
      (local_vars_declaration
        lhs: (var_declaration
          name: (identifier))
        assigned_val: (object_literal
          type: (type_instantiatedTs
            name: (type_identifier)
            arguments: (instantiationT_list
              types: (type_identifier)))
          arguments: (object_literal_body
            (instance_argument
              name: (identifier)
              value: (string_literal))))))))

========================================================================
Object as expression
========================================================================

fun main() {
  { x: 10 };
  Point {};
  Point { x };
  {};
}

------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameter_list)
    (block_statement
      (expression_statement
        (object_literal
          (object_literal_body
            (instance_argument
              (identifier)
              (number_literal)))))
      (expression_statement
        (object_literal
          (type_identifier)
          (object_literal_body)))
      (expression_statement
        (object_literal
          (type_identifier)
          (object_literal_body
            (instance_argument
              (identifier)))))
      (block_statement)
      (empty_statement))))

========================================================================
Conflicts between object and block
========================================================================

fun main() {
  { x };
  { x; };
  {};
  val a = { x };
}

------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameter_list)
    (block_statement
      (block_statement
        (expression_statement
          (identifier)))
      (empty_statement)
      (block_statement
        (expression_statement
          (identifier)))
      (empty_statement)
      (block_statement)
      (empty_statement)
      (local_vars_declaration
        (var_declaration
          (identifier))
        (object_literal
          (object_literal_body
            (instance_argument
              (identifier))))))))

========================================================================
Call a function with options literal
========================================================================

fun main(o: Options = {}) {
    MyMsg.fromSlice(s, { throwIfOpcodeDoesNotMatch: 0xFFFF, })
}

------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameter_list
      (parameter_declaration
        (identifier)
        (type_identifier)
        (object_literal
          (object_literal_body))))
    (block_statement
      (expression_statement
        (function_call
          (dot_access
            (identifier)
            (identifier))
          (argument_list
            (call_argument
              (identifier))
            (call_argument
              (object_literal
                (object_literal_body
                  (instance_argument
                    (identifier)
                    (number_literal)))))))))))
